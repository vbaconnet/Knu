#!/bin/bash

# !! Important !!
# Pour une documentation de ce script, se référer aux fonctions send_help()
# et usage() ci-dessous

. ${WM_PROJECT_DIR:?}/bin/tools/RunFunctions  #Charger les scripts OpenFOAM

#Utilisation du script
usage() {
	echo "Utilisation : Allrun [OPTIONS]"
	echo
	echo "  -c, --clean : Nettoyer le répertoire (maillage, dossiers de résult"
    echo "     -ats, dossiers de processeurs, fichiers log)"
	echo "  -s, --setfields : Lancer setFields selon les critères de "
	echo "      setFieldsDict"
	echo "  -t, --toposet : Lancer topoSet selon les critères de topoSetDict"
	echo "  -p, --parallel : Lancer le calcul en parallèle avec le nombre de pro"
    echo "     -cesseurs défini dans decomposeParDict"
	echo "  -r, --noreconstruct : pour ne pas reconstruire les fichiers après "
	echo "      le calcul parallèle"
	echo "  -n, --nosolve : Ne pas lancer le solveur"
	echo "  -d, --dryrun : Lancer uniquement un pas de temps pour tester le "
	echo "      solveur"
    echo "  -h, --help : afficher l'aide"
}

#------------------------------------------------------------------------------

#Aide
send_help() {
	echo "Utilisation : Allrun [OPTIONS]"
	echo
    echo "Lance le calcul OpenFOAM selon le solveur défini dans controlDict"
    echo "Peut lancer le calcul en parallèle selon les critères définis dans"
    echo "decomposeParDict. Le solveur est lancé en arrière-plan."
	echo 
	echo "OPTIONS"
	echo "-------"
	echo "  -c, --clean : Nettoyer le répertoire (maillage, dossiers de résult"
    echo "     -ats, dossiers de processeurs, fichiers log)"
	echo "  -s, --setfields : Lancer setFields selon les critères de "
	echo "      setFieldsDict"
	echo "  -e, --surfacefeature : Lancer surfaceFeatureExtract"
	echo "  -t, --toposet : Lancer topoSet selon les critères de topoSetDict"
	echo "  -p, --parallel : Lancer le calcul en parallèle avec le nombre de pro"
    echo "     -cesseurs défini dans decomposeParDict"
	echo "  -r, --noreconstruct : pour ne pas reconstruire les fichiers après "
	echo "      le calcul parallèle"
	echo "  -n, --nosolve : ne pas lancer le solveur. Si -p ou -r sont activées,"
	echo "      elles ne seront pas prises en compte et généreront un warning"
	echo "  -d, --dryrun : Lancer uniquement un pas de temps pour tester le "
	echo "      solveur"
    echo "  -h, --help : afficher l'aide"
	echo
	echo "ERREURS"
	echo "-------"
	echo "  1 pour argument ou option invalide"
	echo "  4 si erreur dans decomposePar"
	echo "  7 si erreur de lancement du solveur"
    echo "  8 si erreur dans reconstructPar "
	echo "  9 si erreur dans la copie du dossier 0"
	echo "  10 si erreur dans setFields"
	echo "  11 si erreur dans topoSet"
	echo "  12 si erreur dans surfaceFeatureExtract"
}

#------------------------------------------------------------------------------

#Nettoyer le répertoire mais pas le maillage!
clean() {

    echo "Nettoyage du répertoire $(pwd)"

	# Si Allclean existe, l'utiliser
	if [ command -v "Allclean" &> /dev/null ]; then 
		Allclean --notmesh
	
	# Sinon faire ça manuellement
	else 					   

		# Remove time folders
		foamListTimes -rm -time 0: -withZero

		# Remove processor directories
		rm -rf  processor*

		# Remove logs
		rm  -f log.*
	fi
}

#------------------------------------------------------------------------------

# Vérifier le code de sortie de $?. Si différent de 0, renvoie le code d'erreur $2
# Donner le nom de l'application dans $1
check_exit_code() {
	if [ ! $? -eq 0 ]; then
		error "${1} a échoué. Consulter log.${1} pour plus de détails" ${2}
	else
		echo "${1} terminé"
	fi
}

#------------------------------------------------------------------------------

#Lancer un warning
warning() {
	echo 
	echo "--> Warning : ${1}"
}

#------------------------------------------------------------------------------

#Lancer une erreur avec un message et un code d'erreur 
error() {
	echo 
	echo "--> Erreur : ${1}" 1>&2

	#Si il n'y a qu'un seul argument : erreur 42
	if [ $# -eq 1 ] ; then
		exit 42
	else
		exit ${2}
	fi
}

#------------------------------------------------------------------------------

#Copie du dossier 0
copyZero() {
	if [ -d "0" ] ; then
		echo "Le dossier 0 existe déjà. Aucune action effectuée"
	else
		echo "Dossier 0 non trouvé. Recherche de 0.orig..."
		local ZERODIR=""

		#Recherche de 0.orig
		if [ -d "0.orig" ] ; then 
			echo "0.orig trouvé" 
			local ZERODIR="0.orig" 

		else 
			echo "0.orig pas trouvé. Recherche de 0_orig..."

			#Si pas trouvé, recherche de 0_orig
			if [ -d "0_orig" ] ; then
				echo "0_orig trouvé" 
				local ZERODIR="0_orig"
			else 
				echo "0_orig pas trouvé. Recherche de 0_org..."

				#Si pas trouvé, recherche de 0_org
				if [ -d "0_org" ] ; then 
					echo "0_org trouvé"
					local ZERODIR="0_org"
				else
					#Si pas trouvé, renvoyer une erreur
					echo "0_org pas trouvé."
					error "aucun dossier 0, 0.orig, 0_orig ou 0_org trouvé" 9
				fi
			fi
		fi

	cp -r "${ZERODIR}" 0  # Copie du dossier 0_org ou 0_orig vers 0
	echo "Dossier 0 créé"
	fi
}

#------------------------------------------------------------------------------

#Vérifier les paramètres
check_params() {

	#Si l'utilisateur ne veut pas lancer reconstructpPar mais qu'il n'a pas 
	#activé le calcul parallèle
	if ! $PARALLEL && ! $RECONSTRUCT ; then
		warning "option -r activée sans calcul parallèle:"
		echo "     reconstructPar ne sera pas lancé"
		echo
		echo "  ** Conseil ** Utilisez l'option -p pour activer le calcul parallèle"
	fi

	#Si l'utilisateur veut lancer en parallèle mais pas lancer le solveur
	if $PARALLEL && ! $SOLVE ; then
		warning "option -p activée avec -n : "
		echo "     Aucun calcul en parallèle n'aura lieu"
		echo
		echo "  ** Conseil ** Lorsque vous utilisez -n, pas besoin d'utiliser -p"
	fi
}

#------------------------------------------------------------------------------

#Lancer une application en vérifiant que son Dict existe
# Utilisation : launch_app <nom_app> 
# Arguments optionnels (dans l'ordre):
#   - <code_erreur> : code d'erreur
#   - "constant"|"system" pour préciser un fichier dict
launch_app() {

	local APP=${1}       # Nom de l'application
	local exit_code=42   # Code erreur par défaut

	# Si il y a 2 paramètres, code d'erreur
	if [ $# -eq 2 ] ; then  
		local exit_code=${2}
	fi

	# Si il y a 3 paramètres, vérifier dict
	if [ $# -gt 2 ] ; then

		local DIR=$(basename "${3}")   # Répertoire où chercher

		# Si le dossier donné n'est pas un répertoire
		if [ ! -d "${DIR}" ] ; then
			error "${DIR} non reconnu. Doit être un répertoire"
		fi
		
		local DICTPATH="${DIR}/${APP}Dict" # Chemin complet

		# Si le dict n'existe pas
		if [ ! -f "${DICTPATH}" ] ; then 
			error "${DICTPATH} n'existe pas encore."
			echo
			echo " ** Conseil ** Utilisez la commande foamGetDict : "
			echo "                foamGetDict ${APP}Dict"
		fi

	fi

	# * * * * Vérifier si le fichier log existe * * * * *

	if [ -f "log.${APP}" ] ; then   #Si le fichier log existe déjà

		#Demander si il faut relancer
		echo -n "${APP} a déjà été lancé. Voulez-vous relancer l'application? (o/N) : "
		read CHOIX 

		#Si c'est non, on ne fait rien
		if [ "${CHOIX}" = "N" ] ; then
			echo "${APP} pas relancé"
		
		#Sinon, on lance
		else
			rm "log.${APP}"
			runApplication ${APP}
			check_exit_code "${APP}" ${exit_code}
		fi

	else  #Si le fichier log n'existe pas
		runApplication ${APP}
		check_exit_code "${APP}" ${exit_code}
	fi

}

#******************************************************************************

#Variables pour la lecture des options
#-------------------------------
PARALLEL=false
DIR_WAS_CLEANED=false
RECONSTRUCT=true
SETFIELDS=false
TOPOSET=false
SURFACE_EXTRACT=false
SOLVE=true
#-------------------------------

#Lire les arguments et options avec getopt
#Explication : 
#     -n Allrun : permet que le message d'erreur soit "Allrun ..." et pas
#			"getopt ..."
#	  -o cstprh : lecture d'options courtes de type -h, -s... etc ou -hs
#	  -l clean,... : lecture d'options longues de type --clean, etc
#     -- : signale la fin des options
PARSED_ARGS=$(getopt -n Allrun -o cstdprhn -l clean,setfields,toposet,parallel,noreconstruct,nosolve,help,dryrun -- "$@")

#Vérifier que tout s'est bien passé
if [ ! "${?}" -eq 0 ] ; then
	usage
	exit 1
fi

#Ranger les options lues par getopt dans $1, $2, etc
eval set -- "${PARSED_ARGS}"

echo
echo "Lecture des paramètres"
echo "------------------------"

# On parcourt les paramètres donnés par l'utilisateur
while [ ! "${#}" -eq 0 ] ; do

	case "${1}" in
		-h|--help)            # Afficher l'aide et quitter
		send_help
		exit 0
		;;
		-p|--parallel)        # activer le calcul parallèle
		PARALLEL=true
		echo "Calcul parallèle activé"
		shift
		;;
		-c|--clean)           # nettoyer le dossier
		clean
		DIR_WAS_CLEANED=true
		shift
		;;
		-r|--noreconstruct)   # Ne pas reconstruire après calcul parallèle
		RECONSTRUCT=false
		echo "Pas de reconstruction après le calcul parallèle"
		shift
		;;
		-s|--setfields)       # Lancer setFields
		SETFIELDS=true
		echo "setFields activé"
		shift
		;;
		-t|--toposet)         # Lancer topoSet
		TOPOSET=true
		echo "topoSet activé"
		shift
		;;
		-n|--nosolve)
		SOLVE=false
		echo "Pas de lancement du solveur"
		shift
		;;
		-e|--surfacefeature)
		SURFACE_EXTRACT=true
		echo "Extraction de surface"
		shift
		;;
		--)                   # Fin des arguments
		shift
		break
		;;
		*)                    # Autre option invalide
		echo
		echo "Allmesh : ${1} : argument invalide "
		usage
		exit 1
		;;
	esac
	
done 

echo "------------------------"
echo "Fin de lecture des paramètres"

#Vérifier les paramètres
check_params

#Copie du dossier 0
echo
copyZero

#Lancer topoSet
if $TOPOSET ; then
	launch_app "topoSet" 11 "system"
fi

#Lancement de setFields
if $SETFIELDS ; then
	launch_app "setFields" 10 "system"
fi

#Lancer surfaceFeatureExtract
if $SURFACE_EXTRACT ; then
	launch_app "surfaceFeatureExtract" 12 "system"
fi

#Lancement en parallèle et si on souhaite lancer solveur
if $PARALLEL && $SOLVE; then    

	DECOMPOSEPAR=true  #Par défaut, on lance decomposePar

	#Si processor0 existe, demander à l'utilisateur pour la suppression
	echo
	if [ -d "processor0" ] ; then 

		echo -n "Des fichiers processeurs existent, voulez-vous les garder? (o/N)"
		read CHOIX

		if [ "${CHOIX}" = "N" ] ; then
			echo "Suppression des fichiers processeurs"
			rm -rf processor* 
		else 
			echo "On garde les fichiers processeurs existants"
			DECOMPOSEPAR=false     #Ne pas lancer decomposePar
		fi

	fi

	#Lancer decomposePar si DECOMPOSEPAR=true
	[ ! $DECOMPOSEPAR ]  || { 

		#Lancer decomposePar
		launch_app "decomposePar" 4 "system" 
	 }

	#Lancer le solveur donné dans system/controlDict
	runParallel $(getApplication) 
	check_exit_code $(getApplication) 7

	#Reconstruction des fichiers et effaçage des dossiers si succès 
	if $RECONSTRUCT ; then

		if [ -z "$(foamListTimes -processor)" ] ; then
			echo "Rien à reconstruire"
		else	
			launch_app "reconstructPar" 8
			rm -rf processor*
		
		fi
	fi

#Lancement en séquentiel seulement si on souhaite lancer le solveur
elif $SOLVE; then
 
	#Lancer le solveur donné dans system/controlDict
	launch_app $(getApplication) 7
     
fi

echo "Terminé."
