#!/bin/bash

. ${WM_PROJECT_DIR:?}/bin/tools/RunFunctions #Quelques fonctions d'openfoam


# * * * * * * * * * * * * Fonctions * * * * * * * * * * * * * * * * * * * * * *

# Afficher l'utilisation
usage() {
	echo "Utilisation : Allmesh [OPTIONS]"
	echo
	echo "  -c, --clean : Nettoyer le répertoire. Le maillage existant "
	echo "      (polyMesh) est supprimé par défaut."
	echo "  -p, -parallel : Lancer snappyHexMesh en parallèle avec le nombre de"
	echo "      processeurs défini dans decomposeParDict."
	echo "  -e, --extrudemesh : Lancer l'extrusion de maillage selon les "
	echo "      critères définis dans extrudeMeshDict."
	echo "  -S, --snappyhexmesh : Lancer snappyHexMesh selon les critères "
	echo "      définis dans snappyHexMeshDict."
	echo "  -h, --help : Afficher l'aide "
}

#------------------------------------------------------------------------------

#Afficher l'aide
send_help() {
	echo 
	echo "Utilisation : Allmesh [OPTIONS]"
	echo
	echo "Permet de lancer les outils de maillage d'OpenFOAM. Par défaut, ne "
	echo "lance que blockMesh. Pour lancer snappyHexMesh, utilisez l'option  "
	echo "-S ou --snappyhexmesh. Le script supprime le maillage existant par "
	echo "défaut. blockMesh n'est jamais lancé en parallèle."
	echo
	echo "Les fichiers log suivants sont supprimés si les applications sont bien lancées:"
	echo "   - log.decomposePar : parce que lancer decomposePar ultérieurement"
	echo "       renverra une erreur si ce fichier est présent."
	echo 
	echo "OPTIONS"
	echo "-------"
	echo "  -c, --clean : Nettoyer le répertoire. Le maillage existant "
	echo "      (polyMesh) est supprimé par défaut."
	echo "  -p, -parallel : Lancer snappyHexMesh en parallèle avec le nombre de"
	echo "      processeurs défini dans decomposeParDict."
	echo "  -e, --extrudemesh : Lancer l'extrusion de maillage selon les "
	echo "      critères définis dans extrudeMeshDict."
	echo "  -S, --snappyhexmesh : Lancer snappyHexMesh selon les critères "
	echo "      définis dans snappyHexMeshDict."
	echo "  -h, --help : Afficher l'aide (ce que vous lisez actuellement)"
	echo
	echo "ERREURS"
	echo "-------"
	echo "  1 pour argument ou option invalide"
	echo "  2 si erreur dans blockMesh"
	echo "  3 si erreur dans snappyHexMesh"
	echo "  4 si erreur dans decomposePar"
	echo "  5 si erreur dans extrudeMesh"
	echo "  6 si erreur dans reconstructParMesh"
	echo
}

#------------------------------------------------------------------------------

#Nettoyer le répertoire 
clean() {

    echo "Nettoyage du répertoire $(pwd)"

	# Si Allclean existe, l'utiliser
	if command -v Allclean &> /dev/null ; then 
		Allclean

	# Sinon faire ça manuellement
	else 					   
		# Remove the mesh
		foamCleanPolyMesh

		# Remove time folders
		foamListTimes -withZero -rm

		# Remove processor directories
		rm -rf  processor*

		# Remove logs
		rm  -f log.*
	fi
}

#------------------------------------------------------------------------------

# Vérifier le code de sortie de $?. Si différent de 0, renvoie le code d'erreur $2
# Donner le nom de l'application dans $1
check_exit_code() {
	if [ ! $? -eq 0 ]; then
		echo "--> Erreur : ${1} a échoué. Consulter log.${1} pour plus de détails"
		exit ${2}
	else
		echo "${1} terminé"
	fi
}

#------------------------------------------------------------------------------

#Lancer un warning
warning() {
	echo
	echo "--> Warning : ${1}"
}

#------------------------------------------------------------------------------

#Lancer une erreur avec un message et un code d'erreur 
error() {
	echo
	echo "--> Erreur : ${1}" 1>&2

	#Si il n'y a qu'un seul argument : erreur 42
	if [ $# -eq 1 ] ; then
		exit 42
	else
		exit ${2}
	fi
}

#------------------------------------------------------------------------------

#Lancer une application en vérifiant que son Dict existe
# Utilisation : launch_app <nom_app> 
# Arguments optionnels (dans l'ordre):
#   - <code_erreur> : code d'erreur
#   - "constant"|"system" pour préciser un fichier dict
launch_app() {

	local APP=${1}       # Nom de l'application
	local exit_code=42   # Code erreur par défaut

	# Si il y a 2 paramètres, code d'erreur
	if [ $# -eq 2 ] ; then  
		local exit_code=${2}
	fi

	# Si il y a 3 paramètres, vérifier dict
	if [ $# -gt 2 ] ; then

		local DIR=$(basename "${3}")   # Répertoire où chercher

		# Si le dossier donné n'est pas un répertoire
		if [ ! -d "${DIR}" ] ; then
			error "${DIR} non reconnu. Doit être un répertoire"
		fi
		
		local DICTPATH="${DIR}/${APP}Dict" # Chemin complet

		# Si le dict n'existe pas
		if [ ! -f "${DICTPATH}" ] ; then 
			error "${DICTPATH} n'existe pas encore."
			echo
			echo " ** Conseil ** Utilisez la commande foamGetDict : "
			echo "                foamGetDict ${APP}Dict"
		fi

	fi

	# * * * * Vérifier si le fichier log existe * * * * *

	if [ -f "log.${APP}" ] ; then   #Si le fichier log existe déjà

		#Demander si il faut relancer
		echo -n "${APP} a déjà été lancé. Voulez-vous relancer l'application? (o/N) : "
		read CHOIX 

		#Si c'est non, on ne fait rien
		if [ "${CHOIX}" = "N" ] ; then
			echo "${APP} pas relancé"
		
		#Sinon, on lance
		else
			rm "log.${APP}"
			runApplication ${APP}
			check_exit_code "${APP}" ${exit_code}
		fi

	else  #Si le fichier log n'existe pas
		runApplication ${APP}
		check_exit_code "${APP}" ${exit_code}
	fi

}

#******************************************************************************

# * * * * * * * * * * * * * Lecture des arguments * * * * * * * * * * * * * * *

#Variables pour la lecture des options
#-------------------------------
EXTRUDE=false
PARALLEL=false
SNAPPY=false
DIR_WAS_CLEANED=false
#-------------------------------

#Lire les arguments et options avec getopt
#Explication : 
#     -n Allmesh : permet que le message d'erreur soit "Allmesh ..." et pas
#			"getopt ..."
#	  -o hepcS : lecture d'options courtes de type -h, -e... etc ou -he
#	  -l help,... : lecture d'options longues de type --help, etc
#     -- : signale la fin des options
PARSED_ARGS=$(getopt -n Allmesh -o hepcS -l help,extrudemesh,parallel,clean,snappyhexmesh -- "$@")

#Vérifier que tout s'est bien passé
if [ ! "${?}" -eq 0 ] ; then
	usage
	exit 1
fi

#Ranger les options lues par getopt dans $1, $2, etc
eval set -- "${PARSED_ARGS}"

#Parcourir les paramètres
while [ ! "${#}" -eq 0 ] ; do

	case "${1}" in
		-h|--help) #Afficher l'aide et quitter
		send_help
		exit 0
		;;
		-e|--extrudemesh) #extrusion du maillage
		EXTRUDE=true
		shift
		;;
		-p|--parallel) # activer le calcul parallèle
		PARALLEL=true
		shift
		;;
		-c|--clean) # nettoyer le dossier
		clean
		DIR_WAS_CLEANED=true
		shift
		;;
		-S|--snappyhexmesh) # snappyHexMesh
		SNAPPY=true
		shift
		;;
		--)   #Fin des arguments
		shift
		break
		;;
		*)   # Autre option invalide
		echo
		echo "Allmesh : ${1} : argument invalide "
		usage
		exit 1
		;;
	esac
done

#******************************************************************************

#Lancer un warning si extrudeMesh mais pas snappyHexMesh
if ! $SNAPPY  &&  $EXTRUDE ; then
	echo
	echo "--> Warning : extrudeMesh est activé mais snappyHexMesh ne l'est pas."
	echo "              extrudeMesh ne sera pas exécuté."
	echo
	echo "** Conseil ** Utilisez l'option -S pour activer snappyHexMesh"

fi

#Supprimer le maillage existant si pas déjà nettoyé
if ! $DIR_WAS_CLEANED ; then
	echo "Nettoyage du maillage uniquement"
	foamCleanPolyMesh
	rm -f log.blockMesh log.snappyHexMesh log.decomposePar log.extrudeMesh
	rm -f log.reconstructParMesh log.checkMesh 
fi

#Création du fichier .foam pour paraView
touch $(basename $(pwd)).foam

#blockMesh
echo
launch_app "blockMesh" 2 "system"

#---------------------- snappyHexMesh ----------------

if $SNAPPY ; then

	submot "empty" "emptyy" "system/blockMeshDict"

	#Si lancement en parallèle
	if $PARALLEL ; then

		DECOMPOSEPAR=true  #Par défaut, on lance decomposePar

		#Si processor0 existe, demander à l'utilisateur pour la suppression
		echo
		if [ -d "processor0" ] ; then 

			echo "Des fichiers processeurs existent, voulez-vous les garder? (o/N)"
			read CHOIX

			if [ "${CHOIX}" = "N" ] ; then
				echo "Suppression des fichiers processeurs"
				rm -rf processor* 
			else 
				echo "On garde les fichiers processeurs existants"
				DECOMPOSEPAR=false     #Ne pas lancer decomposePar
			fi

		fi

		#Lancer decomposePar si DECOMPOSEPAR=true
		[ ! $DECOMPOSEPAR ]  || { 

			#Lancer decomposePar
			launch_app "decomposePar" 4 "system"
			rm -f log.decomposePar
		}

		echo
		NPROCS=$(ls | grep "processor*" | wc -l) # Compter le nombre de processeurs
		echo "${NPROCS} processeurs trouvés"

		# Lancer snappyHexMesh en parallèle
		runParallel snappyHexMesh -overwrite
		check_exit_code "snappyHexMesh" 3

		#Reconstruire le maillage
		echo
		runApplication reconstructParMesh -constant
		check_exit_code "reconstructParMesh" 6

		echo
		echo "Suppression des fichiers processeurs"
		rm -rf processor*

	#Sinon, lancement en séquentiel
	else 
		#Lancer snappyHexMesh en séquentiel
		runApplication snappyHexMesh -overwrite
		check_exit_code "snappyHexMesh" 3
	fi	

	submot "emptyy" "empty" "constant/polyMesh/boundary"
	submot "emptyy" "empty" "system/blockMeshDict"

	if $EXTRUDE ; then
		#Lancer l'extrusion de maillage
		launch_app "extrudeMesh" 5 "system" 
	fi

fi

echo 
echo "Vérification du maillage"
runApplication checkMesh
MESH_OK=$(tail log.checkMesh | grep "Mesh OK.") #Sera vide si maillage pas ok

echo
if [ -z "${MESH_OK}" ] ; then
	warning "Le maillage n'a pas passé tous les tests"
	echo "   Consultez le fichier log.checkMesh pour plus de détails"
	echo 
	echo " ** Conseil ** Prenez le temps de faire un maillage correct,"
	echo "    un mauvais maillage donnera des mauvais résultats!"
else
	echo "Le maillage a passé tous les tests"

fi

echo 
echo "Terminé"
#=====================================================
