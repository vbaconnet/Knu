#!/bin/bash

. ${WM_PROJECT_DIR:?}/bin/tools/RunFunctions  #Charger les scripts OpenFOAM

#* * * * * * * * * * * * * Fonctions * * * * * * * * * * * * * * * * * * * * * 

usage() {
    echo "Utilisation : AllpostProcess [OPTIONS] <script1> <script2> ... <scriptN>"
    echo "  --log=<log_file> : définir un autre fichier log dans"
    echo "      lequel lire."
    echo "  -h, --help : afficher l'aide complète"
}

#------------------------------------------------------------------------------

send_help() {
    echo
    echo "Utilisation : AllpostProcess [OPTIONS] <script1> <script2> ... <scriptN>"
    echo
    echo "Lance une série de scripts lorsque la simulation est terminée. La"
    echo "fin de la simulation est basée sur le fichier log de sortie de "
    echo "simulation, au format log.nomSolver, où nomSolver est le nom du "
    echo "solveur donné dans controlDict. Il est possible de changer le nom"
    echo "du fichier avec l'option --log=<fichier_log>."
    echo
    echo "OPTIONS"
    echo "-------"
    echo "   --log=<log_file> : définir un autre fichier log dans"
    echo "      lequel lire."
    echo "   -h, --help: Afficher l'aide"
    echo
    echo "ERREURS"
    echo "-------"
    echo "   1 en cas de problème de lecture d'option"
    echo "   2 en cas de problème de lecture de fichier"
    echo

}

#------------------------------------------------------------------------------

#Lancer une erreur avec un message et un code d'erreur 
error() {
	echo 
	echo "--> Erreur : $@" 1>&2

	#Si il n'y a qu'un seul argument : erreur 42
	if [ $# -eq 1 ] ; then
		exit 42
	else
		exit ${2}
	fi
}

#------------------------------------------------------------------------------

# Vérifier le code de sortie de $?. Si différent de 0, renvoie le code d'erreur $2
# Donner le nom de l'application dans $1
check_exit_code() {
	if [ ! $? -eq 0 ]; then
		error "${1} a échoué."
		exit ${2}
	else
		echo "${1} terminé"
	fi
}


#******************************************************************************

LOGFILE="log.$(getApplication)" #Définir fichier log

# * * * * * * * * * * * * * Lecture des arguments * * * * * * * * * * * * * * *

#Lire les arguments et options avec getopt
#Explication : 
#     -n Allpostprocess : permet que le message d'erreur soit "Allrun ..." et pas
#			"getopt ..."
#	  -o h : lecture d'options courtes de type -h
#	  -l log,... : lecture d'options longues de type --log, etc
#     -- : signale la fin des options
PARSED_ARGS=$(getopt -n Allpostprocess -o h -l log:,help -- "$@")

#Vérifier que tout s'est bien passé
if [ ! "${?}" -eq 0 ] ; then
	usage
	exit 1
fi

#Ranger les options lues par getopt dans $1, $2, etc
eval set -- "${PARSED_ARGS}"

# On parcourt les paramètres donnés par l'utilisateur
for key in $@ ; do 

	case $key in
		-h|--help)     # Afficher l'aide et quitter
		    send_help
		    exit 0
		    ;;
        --log)      # Précise le fichier logfile
            shift  #Le paramètre suivant est le nom du fichier log
            LOGFILE=${1}
            echo "Fichier log défini à : ${LOGFILE}"
            ;;
        --)        # Fin des paramètres
            shift
            break
            ;;
		*)   # Autre option 
            #Si le paramètre donné commence par un tiret, il n'est pas accepté
            if [ ! -z $(echo $key | grep -o "\-") ]; then
                echo
                error "Erreur : argument invalide ${key}" usage
                exit 1
            fi
		;;
	esac
	
done 

#Vérifier si il y a bien une liste d'arguments
if [ $# -eq 0 ]; then
    error "Erreur : aucun script donné en paramètre"
    usage
    exit 1
fi

#******************************************************************************

#Lire le dernier temps de simulation
TIME=$(tail -300 ${LOGFILE} | grep ^Time | tail -1 | grep -Eo '[+-]?[0-9]+([.][0-9]+)?')
check_exit_code "Lecture du fichier ${LOGFILE}" 2
echo "Dernier temps dans le fichier ${LOGFILE} : ${TIME}"

EMPTY_IF_END=$(tail ${LOGFILE} | grep "^End")

#Boucler tant qu'on a pas terminé 
while [ -z $EMPTY_IF_RUNNING ] && [ ! -z "${TIME}" ] ; do

    sleep 2
    clear

    #Lire le dernier temps de simulation
    TIME=$(tail -300 ${LOGFILE} | grep ^Time | tail -1 | grep -Eo '[+-]?[0-9]+([.][0-9]+)?') 
    dT=$(tail -300 ${LOGFILE} | grep ^deltaT | tail -1 | grep -Eo '[+-]?[0-9]+([.][0-9]+)?') 
    end_time=$(cat system/controlDict | grep "endTime" | tail -1 | grep -Eo '[+-]?[0-9]+([.][0-9]+)?')
    execution_time=$(tail -300 ${LOGFILE} | grep "ExecutionTime" | tail -1 | grep -Eo '[+-]?[0-9]+([.][0-9]+)?' | head -1)

    remaining_time=$(awk "BEGIN {print ${execution_time} * (${end_time} / ${TIME} - 1.0)}")

    echo "Temps de simulation  : ${TIME} / ${end_time}"
    echo "Pas de temps         : ${dT}"
    echo "Temps d'exécution    : $(decompose_seconds ${execution_time})"
    echo "Temps restant estimé : $(decompose_seconds ${remaining_time})"

    EMPTY_IF_RUNNING=$(tail ${LOGFILE} | grep "^End")

done

echo "Simulation terminée"
#Pour chaque paramètre, l'exécuter
for script in $@ ; do
    echo "Execution de ${script}"
    $script
    check_exit_code "${script}" 2
done

echo
echo "Terminé"
