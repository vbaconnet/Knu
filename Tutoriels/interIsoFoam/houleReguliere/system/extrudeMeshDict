/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.6                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      extrudeProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Where to get surface from: either from surface ('surface') or
// from (flipped) patch of existing case ('patch')
constructFrom patch;    //surface;

// If construct from (flipped) patch
sourceCase "/mount/internal/work-in/projects/I0042_Knu/vBaconnet/IN647-A1586_PORT_LA_GALERE/Runs/actuel2/turbulent/irreguliere_Tp9.5s_Hs2.8m_gamma1.0_RAFFINE2";
sourcePatches (backPlane);
exposedPatchName backPlane;

// Flip surface normals before usage.
flipNormals false;

// If construct from surface
surface "actuel2_canal.eMesh";


// Do front and back need to be merged? Usually only makes sense for 360
// degree wedges.
mergeFaces false; //true;


//- Linear extrusion in point-normal direction
extrudeModel        linearNormal;

//- Wedge extrusion. If nLayers is 1 assumes symmetry around plane.
//extrudeModel        wedge;

//- Extrudes into sphere around (0 0 0)
//extrudeModel        linearRadial;

//- Extrudes into sphere with grading according to pressure (atmospherics)
//extrudeModel        sigmaRadial;

nLayers          1; // was 20;

wedgeCoeffs
{
    axisPt      (0 0.1 0);
    axis        (-1 0 0);
    angle       360;  // For nLayers=1 assume symmetry so angle/2 on each side
}

linearNormalCoeffs
{
    thickness       1.0; // was 0.05;
}

linearDirectionCoeffs
{
    direction (0 1 0);
    thickness 1;
}

linearRadialCoeffs
{
     R              0.1;
}

sigmaRadialCoeffs
{
    RTbyg           1;
    pRef            1;
    pStrat          1;
}


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //


