/*--------------------------------*- C++ -*----------------------------------*\
| #calc========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2006                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version         2.0;
    format          ascii;
    class           dictionary;
    object          blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale   1;

//Dimensions du canal
xmin  0.0;
xmax  26.0;
xsep  4.0; //zone de séparation pour le premier bloc
ymin  0.0;
ymax  1.0;
zmin  0.0;
zmax  2.5;

xLen #calc "$xmax - $xmin";
zLen #calc "$zmax - $zmin";

//Nombre de points dans la direction z (verticale)
nz 50.0; //Doit être un double!

//Taux de croissance du pas dx 
xgrad 0.5;

//Nombre de points dans le direction x du maillage constant
nx #calc "($xmax - $xsep)/($zmax - $zmin) * $nz";

//Pas de discrétisation dans la direction x
dx #calc "($xmax - $xsep) / $nx";

//Nombre de points dans la partie non constante
nxGauche #calc "log( $xgrad ) / log( ($xsep - $dx / $xgrad) / ($xsep - $dx) ) + 1.0";

//Ne pas oublier de reconvertir en int
Ng #calc "std::floor($nxGauche)";
Nz #calc "std::floor($nz)";
Nx #calc "std::floor($nx)";

vertices
(
   ($xmin  $ymin  $zmin) //0
   ($xsep  $ymin  $zmin) //1
   ($xsep  $ymin  $zmax) //2
   ($xmin  $ymin  $zmax) //3

   ($xmin  $ymax  $zmin) //4
   ($xsep  $ymax  $zmin) //5
   ($xsep  $ymax  $zmax) //6
   ($xmin  $ymax  $zmax) //7

   ($xmax  $ymin  $zmin) //8
   ($xmax  $ymin  $zmax) //9
   ($xmax  $ymax  $zmax) //10
   ($xmax  $ymax  $zmin) //11
);

blocks
(
    hex (0 1 5  4 3 2 6  7)   ( $Ng 1 $Nz) simpleGrading ($xgrad 1 1)
    hex (1 8 11 5 2 9 10 6)   ( $Nx 1 $Nz) simpleGrading (  1    1 1)
);

edges
(
);

boundary
(
    bottom1
    {
        type wall;
        faces
        (
            (0 1 5 4)
        );
    }
    bottom2
    {
        type wall;
        faces
        (
            (1 8 11 5)
        );
    }
    front
    {
        type empty;
        faces
        (
            (0 1 2 3)
            (1 8 9 2)
        );
    }
    back
    {
        type empty;
        faces
        (
            (4 5 6 7)
            (5 11 10 6)
        );
    }
    leftwall
    {
        type patch;
        faces
        (
            (0 4 7 3)
        );
    }
    rightwall
    {
        type patch;
        faces
        (
            (8 11 10 9)
        );
    }
    top
    {
        type wall;
        faces
        (
            (3 2 6 7)
            (2 9 10 6)
        );
    }
);

mergePatchPairs
(
    
);

// ************************************************************************* //
