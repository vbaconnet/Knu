/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2006                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         Euler;
}

gradSchemes
{
    default         Gauss linear;
}

divSchemes
{
    div(rhoPhi,U)  				Gauss limitedLinear 1;
    div(U)  					Gauss linear; 
    div(phi,alpha)  				Gauss vanLeer;
    div(phirb,alpha) 				Gauss interfaceCompression;
    div(((rho*nuEff)*dev2(T(grad(U))))) 	Gauss linear;
    div((interpolate(rho)*phi),k) 		Gauss linear;
    div(phi,epsilon) 				Gauss linear;
    div((interpolate(rho)*phi),omega)		Gauss linear;
    div(phi,k)      				Gauss upwind;
    div(phi,omega) 				Gauss upwind;
    div((phi*interpolate(rho)),epsilon) 	Gauss upwind;

    div((rhoPhi|interpolate(porosity)),U)  	Gauss limitedLinearV 1;
    div(rhoPhi,UPor)  				Gauss limitedLinearV 1;
    div(rhoPhiPor,U)   				Gauss limitedLinearV 1;
    div((phi|interpolate(porosity)),k)      	Gauss upwind;
    div((phi|interpolate(porosity)),epsilon) 	Gauss upwind;
    div((phi|interpolate(porosity)),omega) 	Gauss upwind;
}

laplacianSchemes
{
    default         Gauss linear corrected;
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{
    default         orthogonal;
}

wallDist
{
    method		meshWave;
}

// ************************************************************************* //
